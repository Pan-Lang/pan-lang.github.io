{"version":3,"sources":["images/empty-cart.svg","images/logo_nobg.png","components/Navbar.js","api/Client.js","api/People.js","constants/Months.js","constants/Years.js","pages/Home.js","pages/About.js","pages/Order.js","api/Stock.js","components/StockModal.js","components/ErrorAlert.js","components/StockCard.js","components/StockInput.js","components/Loading.js","constants/Languages.js","pages/Stock.js","components/OrderModal.js","components/OrderCard.js","components/ConfirmationModal.js","pages/OrderStock.js","components/FulfillModal.js","components/UnfulfilledOrderCard.js","components/Dialog.js","pages/OrderTracker.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","Navbar","collapseOnSelect","bg","expand","fixed","Brand","href","as","Link","to","id","src","require","alt","style","width","height","Toggle","aria-controls","Collapse","Nav","className","eventKey","BASE_API_URL","axios","create","baseURL","item","a","Client","post","then","res","catch","e","MONTHS","MONTH_NAMES","YEARS","Home","current","Date","useState","month","getMonth","year","getFullYear","date","setDate","Container","textAlign","marginBottom","color","fontWeight","Button","backgroundColor","borderColor","borderRadius","size","block","URLSearchParams","Dropdown","onChange","console","log","variant","indexOf","Menu","map","Item","onSelect","key","About","paddingBottom","orderSchema","Yup","firstName","required","lastName","adults","moreThan","children","zipcode","lessThan","integer","orderNotes","OrderForm","history","useHistory","validationSchema","onSubmit","personInfo","push","fromForm","initialValues","handleSubmit","handleChange","touched","handleBlur","values","errors","isValid","Form","noValidate","Group","md","controlId","Label","Control","type","name","placeholder","isInvalid","Feedback","display","flexDirection","fetchStock","get","updateStockCount","updated","put","error","amountSchema","newCount","StockModal","show","handleClose","getStock","stockId","stockName","stockCount","loading","setLoading","setError","updatedCount","updateIsSuccessful","Modal","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","onClick","ErrorAlert","heading","body","dismissible","onClose","Alert","length","Heading","StockCard","stockItem","lang","showAmountModal","setShowAmountModal","hasLanguage","setHasLanguage","useEffect","undefined","Card","margin","Text","fontSize","count","timestamp","toDateString","alignItems","padding","Badge","alignSelf","_id","stockSchema","StockInput","Accordion","createStockItem","Loading","justifyContent","Spinner","animation","role","marginLeft","marginRight","LANGUAGES","Stock","stock","setStock","language","setLanguage","timeout","setTimeout","data","capitalize","s","charAt","toUpperCase","slice","OrderModal","onRequest","selectedAmount","setSelectedAmount","ButtonGroup","aria-label","disabled","requestedItem","requestedCount","countAfterRequest","OrderCard","isRequested","showOrderModal","ConfirmationModal","title","buttonText","OrderStock","location","useLocation","state","retrieveFromStorage","requestedStockItems","setRequestedStockItems","showConfirmation","setShowConfirmation","defaultValue","stored","localStorage","getItem","JSON","parse","updatedRequestedItems","alreadyRequested","find","concat","itemIndex","setItem","stringify","writeRequestToNotes","forEach","r","addPersonInfo","firstname","lastname","fulfilled","stockUpdatePromises","Promise","all","responses","removeItem","some","requested","FulfillModal","person","fulfillPerson","UnfulfilledOrderCard","showFulfillModal","setShowFulfillModal","useStyles","makeStyles","theme","button","spacing","dialog","image","marginTop","grid","Theme","createMuiTheme","palette","primary","main","secondary","action","AlertDialogSlide","classes","React","open","setOpen","useTheme","useMediaQuery","breakpoints","down","Dialog","maxWidth","keepMounted","aria-describedby","DialogTitle","DialogActions","Grid","container","lg","sm","xs","cart","OrderTracker","ordersList","setOrdersList","personFulfilled","socket","socketIOClient","emit","on","confirmation","disconnect","filter","order","eventHandler","personData","currentOrders","Login","pantryName","setPantryName","InputGroup","target","value","FormControl","App","basename","process","รง","exact","path","Order","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b4d0aacd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-cart.302b7b48.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_nobg.484389dc.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nfunction NavigationBar() {\r\n  return (\r\n    <Navbar collapseOnSelect={true} bg=\"light\" expand=\"lg\" fixed=\"top\">\r\n      <Navbar.Brand href=\"#home\" as={Link} to=\"/\">\r\n        <div id=\"logo\">\r\n          <img\r\n            src={require('../images/logo_nobg.png')}\r\n            alt=\"Pan-Lang\"\r\n            style={{ width: 75, height: 75 }}\r\n          ></img>\r\n        </div>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link eventKey=\"0\" as={Link} to=\"/\">\r\n            Home\r\n          </Nav.Link>\r\n          <Nav.Link eventKey=\"1\" as={Link} to=\"/about\">\r\n            About\r\n          </Nav.Link>\r\n          <Nav.Link eventKey=\"2\" as={Link} to=\"/order\">\r\n            Order\r\n          </Nav.Link>\r\n          <Nav.Link eventKey=\"3\" as={Link} to=\"/stock\">\r\n            Stock\r\n          </Nav.Link>\r\n          <Nav.Link eventKey=\"4\" as={Link} to=\"/order-tracker\">\r\n            Order Tracker\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import axios from 'axios';\r\n\r\nexport const BASE_API_URL = 'https://panlang.herokuapp.com';\r\n\r\nexport default axios.create({\r\n  baseURL: BASE_API_URL,\r\n});\r\n","import Client from './Client';\r\n\r\nexport const PEOPLE_ENDPOINT = '/people';\r\n\r\nexport async function addPersonInfo(item) {\r\n  Client.post(PEOPLE_ENDPOINT, item)\r\n    .then((res) => {\r\n      return true;\r\n    })\r\n    .catch((e) => {\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function fetchPeople() {\r\n  const promise = await Client.get(PEOPLE_ENDPOINT);\r\n  return promise;\r\n}\r\n","export const MONTHS = [\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '10',\r\n  '11',\r\n  '12',\r\n];\r\n\r\nexport const MONTH_NAMES = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n","const YEARS = ['2020', '2021', '2022', '2023', '2024'];\r\n\r\nexport default YEARS;","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { Link } from 'react-router-dom';\r\nimport { PEOPLE_ENDPOINT } from '../api/People';\r\nimport { BASE_API_URL } from '../api/Client';\r\nimport { MONTHS, MONTH_NAMES } from '../constants/Months';\r\nimport YEARS from '../constants/Years';\r\n\r\nfunction Home() {\r\n  const current = new Date();\r\n  const [date, setDate] = useState({\r\n    month: MONTHS[current.getMonth()],\r\n    year: current.getFullYear(),\r\n  });\r\n\r\n  return (\r\n    <Container style={{ textAlign: 'center' }}>\r\n      <div style={{ marginBottom: 20 }}>\r\n        <br></br>\r\n        <h1>Welcome to </h1>{' '}\r\n        <h1>\r\n          <font style={{ color: '#35E82A', fontWeight: 'bold' }}>Pan-</font><font style={{ color: '#2EFFD5', fontWeight: 'bold' }}>Lang</font>\r\n        </h1>\r\n      </div>\r\n      <div>\r\n        <Link to=\"/order\" style={{ color: 'white' }}>\r\n          <Button style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}} size=\"lg\" className=\"mb-3\" block>\r\n            Start a new order\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Link to=\"/stock\" style={{ color: 'white' }}>\r\n        <Button style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}} size=\"lg\" className=\"mb-3\" block>\r\n          Edit and add stock items\r\n        </Button>{' '}\r\n      </Link>\r\n\r\n      <br></br>\r\n      <br></br>\r\n      {/* I think we want an anchor tag w/ href and target=_blank , \r\n      if we use axios we have to hack around downloading the content for the user*/}\r\n      <a\r\n        href={`${BASE_API_URL}${PEOPLE_ENDPOINT}?${new URLSearchParams(date)}`}\r\n      >\r\n        <Button style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}} size=\"lg\" className=\"mb-3\" block>\r\n          Download order data\r\n        </Button>{' '}\r\n      </a>\r\n\r\n      {/* Month selection dropdown here */}\r\n      <Dropdown onChange={(e) => console.log(e)}>\r\n        <Dropdown.Toggle\r\n          variant=\"type\"\r\n          id=\"dropdown-basic\"\r\n          size=\"md\"\r\n          className=\"mb-3\"\r\n          style={{backgroundColor: '#35E82A', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}\r\n        >\r\n          Month: <b>{MONTH_NAMES[MONTHS.indexOf(date.month)]}</b>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {MONTHS.map((month) => (\r\n            <Dropdown.Item\r\n              onSelect={(key) => setDate({ ...date, month: key })}\r\n              eventKey={month}\r\n              key={month}\r\n            >\r\n              {MONTH_NAMES[MONTHS.indexOf(month)]}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n\r\n      {/* Year selection dropdown here */}\r\n      <Dropdown onChange={(e) => console.log(e)}>\r\n        <Dropdown.Toggle\r\n          variant=\"type\"\r\n          id=\"dropdown-basic\"\r\n          size=\"md\"\r\n          className=\"mb-3\"\r\n          style={{backgroundColor: '#35E82A', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}\r\n        >\r\n          Year: <b>{date.year}</b>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {YEARS.map((year) => (\r\n            <Dropdown.Item\r\n              onSelect={(key) => setDate({ ...date, year: key })}\r\n              eventKey={year}\r\n              key={year}\r\n            >\r\n              {year}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction About() {\r\n  return (\r\n    <Container style={{ paddingBottom: 120, backgroundColor: 'white' }}>\r\n      <div style={{ marginBottom: 20 }}>\r\n        <h1>\r\n          {'About '}\r\n          <font style={{ color: '#26B020', fontWeight: 'bold' }}>\r\n            Pan-Lang:\r\n          </font>\r\n        </h1>\r\n        <p>\r\n          Pan-Lang is an organizational web application designed to help local\r\n          food bank organizers keep track of orders, maintain visitor records,\r\n          and communicate with non-English speaking patrons.\r\n        </p>\r\n        <p>\r\n          Food insecurity is an important issue in the Champain County\r\n          community. Nearly 15% of residents must deal with food insecurity.\r\n          Many of these individuals are also ineligible for federal nutrition\r\n          programs and must rely on local food pantries for meals.\r\n        </p>\r\n        <p>\r\n          On top of this, many of these individuals speak limited English,\r\n          making it difficult for them to communicate their needs to food pantry\r\n          staff. With Pan-Lang, our mission is to break this language barrier\r\n          and provide a more efficient method of supporting those in need.\r\n        </p>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst orderSchema = Yup.object({\r\n  firstName: Yup.string().required(),\r\n  lastName: Yup.string().required(),\r\n  adults: Yup.number().moreThan(-1).required(),\r\n  children: Yup.number().moreThan(-1).required(),\r\n  zipcode: Yup.number().moreThan(9999).lessThan(100000).integer().required(),\r\n  orderNotes: Yup.string().required(),\r\n});\r\n\r\nfunction OrderForm() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Container style={{ backgroundColor: 'white', paddingBottom: 120 }}>\r\n      <h1 style={{ textAlign: 'center' }}>Order</h1>\r\n      <Formik\r\n        validationSchema={orderSchema}\r\n        onSubmit={(personInfo) => {\r\n          history.push('/order-stock', { fromForm: true, personInfo })\r\n        }}\r\n        initialValues={{\r\n          firstName: '',\r\n          lastName: '',\r\n          adults: -1,\r\n          children: -1,\r\n          zipcode: -1,\r\n          orderNotes: 'test'\r\n        }}\r\n      >\r\n        {({\r\n          handleSubmit,\r\n          handleChange,\r\n          handleBlur,\r\n          values,\r\n          touched,\r\n          isValid,\r\n          errors,\r\n        }) => (\r\n          <div>\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n              <Form.Group md=\"4\" controlId=\"orderForm1\">\r\n                <Form.Label>First name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"firstName\"\r\n                  placeholder={'Enter first name here'}\r\n                  onChange={handleChange}\r\n                  isValid={touched.firstName && !errors.firstName}\r\n                  isInvalid={!!errors.firstName}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Form.Group md=\"4\" controlId=\"orderForm2\">\r\n                <Form.Label>Last name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"lastName\"\r\n                  placeholder={'Enter last name here'}\r\n                  onChange={handleChange}\r\n                  isValid={touched.lastName && !errors.lastName}\r\n                  isInvalid={!!errors.lastName}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Form.Group md=\"4\" controlId=\"orderForm3\">\r\n                <Form.Label># of Adults</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  name=\"adults\"\r\n                  placeholder={'Enter number of adults in household'}\r\n                  onChange={handleChange}\r\n                  isValid={touched.adults && !errors.adults}\r\n                  isInvalid={!!errors.adults}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Form.Group md=\"4\" controlId=\"orderForm4\">\r\n                <Form.Label># of Children</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  name=\"children\"\r\n                  placeholder={'Enter number of children in household'}\r\n                  onChange={handleChange}\r\n                  isValid={touched.children && !errors.children}\r\n                  isInvalid={!!errors.children}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Form.Group md=\"4\" controlId=\"orderForm4\">\r\n                <Form.Label>ZIP Code</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  name=\"zipcode\"\r\n                  placeholder={'Enter your ZIP Code'}\r\n                  onChange={handleChange}\r\n                  isValid={touched.zipcode && !errors.zipcode}\r\n                  isInvalid={!!errors.zipcode}\r\n                />\r\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n              </Form.Group>\r\n              <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\r\n                <Button type=\"submit\" style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}} block>Select order</Button>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default OrderForm;\r\n","import Client from './Client';\r\n\r\nconst STOCK_ENDPOINT = '/stock';\r\n\r\nexport async function fetchStock() {\r\n  return await Client.get(STOCK_ENDPOINT);\r\n}\r\n\r\nexport async function createStockItem(item) {\r\n  Client.post(STOCK_ENDPOINT, item)\r\n    .then((res) => {\r\n      return true;\r\n    })\r\n    .catch((e) => {\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function updateStockCount(id, updated) {\r\n  return await Client.put(`${STOCK_ENDPOINT}/${id}`, updated)\r\n    .then((res) => {\r\n      console.log(res);\r\n      return true;\r\n    })\r\n    .catch((e) => {\r\n      console.error(e)\r\n      return false;\r\n    })\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { updateStockCount } from '../api/Stock';\r\n\r\nconst amountSchema = Yup.object({\r\n  newCount: Yup.number().integer().moreThan(-1).required(),\r\n});\r\n\r\nfunction StockModal({\r\n  show,\r\n  handleClose,\r\n  getStock,\r\n  stockId,\r\n  stockName,\r\n  stockCount,\r\n}) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  async function onSubmit(updatedCount) {\r\n    setLoading(true);\r\n    const updateIsSuccessful = await updateStockCount(stockId, updatedCount);\r\n\r\n    setLoading(false);\r\n\r\n    if (!updateIsSuccessful) {\r\n      setError(true);\r\n    } else {\r\n      handleClose();\r\n      getStock(500);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Formik\r\n        validationSchema={amountSchema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          newCount: -1,\r\n        }}\r\n      >\r\n        {({\r\n          handleSubmit,\r\n          handleChange,\r\n          handleBlur,\r\n          values,\r\n          touched,\r\n          isValid,\r\n          errors,\r\n        }) => (\r\n          <>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Edit amount for: {stockName}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n\r\n            {/* Body of modal; changes upon sending update request */}\r\n            <Modal.Body>\r\n              {!loading && !error && (\r\n                <>\r\n                  <p>Current amount: {stockCount}</p>\r\n                  <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Group controlId=\"stockCount\">\r\n                      <Form.Control\r\n                        type=\"number\"\r\n                        name=\"newCount\"\r\n                        placeholder={'Insert new item count'}\r\n                        onChange={handleChange}\r\n                        isValid={touched.newCount && !errors.newCount}\r\n                        isInvalid={!!errors.newCount}\r\n                      />\r\n                      <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                  </Form>\r\n                </>\r\n              )}\r\n\r\n              {loading && <p>Updating stock count for {stockName}...</p>}\r\n\r\n              {error && <p>An error occurred when trying to update stock.</p>}\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              {!loading && (\r\n                <>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    style={{borderRadius: '200px'}}\r\n                    onClick={() => {\r\n                      setError(false);\r\n                      setLoading(false);\r\n                      handleClose();\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  {!error && (\r\n                    <Button onClick={handleSubmit}\r\n                    style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}>\r\n                      Save new amount\r\n                    </Button>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default StockModal;\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nfunction ErrorAlert({ heading = '', body, dismissible = false, onClose }) {\r\n  return (\r\n    <Alert variant=\"danger\" onClose={onClose} dismissible={dismissible} className={'mt-3'}>\r\n      {heading.length > 0 && <Alert.Heading>{heading}</Alert.Heading>}\r\n      {body}\r\n    </Alert>\r\n  );\r\n}\r\n\r\nexport default ErrorAlert;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Badge, Container, Card } from 'react-bootstrap';\r\nimport StockModal from './StockModal';\r\nimport ErrorAlert from './ErrorAlert';\r\n\r\nfunction StockCard({ stockItem, getStock, lang = 'name' }) {\r\n  const [showAmountModal, setShowAmountModal] = useState(false);\r\n  const [hasLanguage, setHasLanguage] = useState(false);\r\n\r\n  // Handlers for showing/closing modal when editing item amount\r\n  const handleClose = () => setShowAmountModal(false);\r\n  const handleShow = () => setShowAmountModal(true);\r\n\r\n  // Determine whether this stock item has a name in the specified language\r\n  useEffect(() => {\r\n    setHasLanguage(stockItem[lang] !== undefined);\r\n  }, [lang, stockItem]);\r\n\r\n  return (\r\n    <>\r\n      <Card style={{ margin: 5 }}>\r\n        <Card.Body>\r\n          <Card.Header as=\"h2\">\r\n            {hasLanguage ? stockItem[lang] : stockItem.name}\r\n            {lang !== 'name' && hasLanguage\r\n              ? ' (' + stockItem['name'] + ')'\r\n              : ''}\r\n          </Card.Header>\r\n\r\n          <Card.Text>\r\n            Amount:{' '}\r\n            <font style={{ fontSize: '1.4em', fontWeight: 'bolder' }}>\r\n              {stockItem.count}\r\n            </font>\r\n          </Card.Text>\r\n\r\n          <Card.Text style={{ textAlign: 'right' }}>\r\n            Last updated:{' '}\r\n            {stockItem.timestamp !== undefined\r\n              ? new Date(stockItem.timestamp).toDateString()\r\n              : 'Unavailable'}\r\n          </Card.Text>\r\n\r\n          <Container\r\n            style={{ display: 'flex', alignItems: 'center', padding: 0 }}\r\n          >\r\n            {!hasLanguage && (\r\n              <Badge variant=\"danger\">Language unavailable: {lang}</Badge>\r\n            )}\r\n            <div style={{ margin: 'auto' }} />\r\n            <Button\r\n              size=\"sm\"\r\n              style={{alignSelf: 'center', backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}\r\n              onClick={handleShow}\r\n            >\r\n              Edit amount\r\n            </Button>\r\n          </Container>\r\n\r\n          {stockItem.count <= 0 && <ErrorAlert body=\"Warning: Out of stock\" />}\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <StockModal\r\n        show={showAmountModal}\r\n        handleClose={handleClose}\r\n        getStock={getStock}\r\n        stockName={hasLanguage ? stockItem[lang] : stockItem.name}\r\n        stockId={stockItem._id}\r\n        stockCount={stockItem.count}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StockCard;\r\n","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { createStockItem } from '../api/Stock';\r\n\r\nconst stockSchema = Yup.object({\r\n  name: Yup.string().required(),\r\n  count: Yup.number().integer().moreThan(-1).required(),\r\n});\r\n\r\n/**\r\n * Handles creation of new stock items\r\n */\r\nfunction StockInput({ getStock }) {\r\n  return (\r\n    <Accordion>\r\n      <Card>\r\n        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n          Click here to insert a stock item\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            <Formik\r\n              validationSchema={stockSchema}\r\n              onSubmit={(item) => {\r\n                getStock(500);\r\n                console.log(createStockItem(item));\r\n              }}\r\n              initialValues={{\r\n                name: '',\r\n                count: -1,\r\n              }}\r\n            >\r\n              {({\r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n              }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                  <Form.Group controlId=\"stockInputName\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder={'Insert item name here'}\r\n                      onChange={handleChange}\r\n                      isValid={touched.name && !errors.name}\r\n                      isInvalid={!!errors.name}\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"stockInputCount\">\r\n                    <Form.Control\r\n                      type=\"number\"\r\n                      name=\"count\"\r\n                      placeholder={'Insert item count here'}\r\n                      onChange={handleChange}\r\n                      isValid={touched.count && !errors.count}\r\n                      isInvalid={!!errors.count}\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <Button variant=\"success\" type=\"submit\">\r\n                    Add item to database\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n}\r\n\r\nexport default StockInput;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <Container style={{ display: 'flex', justifyContent: 'center' }}>\r\n      <Spinner\r\n        animation=\"border\"\r\n        role=\"status\"\r\n        className=\"mt-3\"\r\n        style={{ marginLeft: 'auto', marginRight: 'auto' }}\r\n      >\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","const LANGUAGES = ['english', 'spanish', 'french', 'chinese'];\r\n\r\nexport default LANGUAGES;","import React, { useEffect, useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport StockCard from '../components/StockCard';\r\nimport StockInput from '../components/StockInput';\r\nimport { fetchStock } from '../api/Stock';\r\nimport { Button } from 'react-bootstrap';\r\nimport Loading from '../components/Loading';\r\nimport LANGUAGES from '../constants/Languages';\r\nimport ErrorAlert from '../components/ErrorAlert';\r\n\r\n/**\r\n * Displays the stock of food pantry with options for language\r\n */\r\nfunction Stock() {\r\n  const [stock, setStock] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [language, setLanguage] = useState(LANGUAGES[0]);\r\n\r\n  function getStock(timeout = 0) {\r\n    // Set stock empty to begin loading spinner\r\n    setStock([]);\r\n    setError(false);\r\n\r\n    // Fetch stock after designated time\r\n    setTimeout(() => {\r\n      fetchStock()\r\n        .then((res) => {\r\n          setStock(res.data);\r\n        })\r\n        .catch((e) => setError(true));\r\n    }, timeout);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getStock();\r\n  }, []);\r\n\r\n  function capitalize(s) {\r\n    return s.charAt(0).toUpperCase() + s.slice(1);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1 style={{ textAlign: 'center' }}>Stock</h1>\r\n      <Container style={{ display: 'flex', alignItems: 'center', padding: 0 }}>\r\n        <Dropdown onChange={(e) => console.log(e)}>\r\n          <Dropdown.Toggle\r\n            variant=\"type\"\r\n            id=\"dropdown-basic\"\r\n            size=\"md\"\r\n            className=\"mb-3\"\r\n            style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}\r\n          >\r\n            Language: <b>{capitalize(language)}</b>\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu>\r\n            {LANGUAGES.map((lang) => (\r\n              <Dropdown.Item\r\n                onSelect={(key) => setLanguage(key)}\r\n                eventKey={lang}\r\n                key={lang}\r\n              >\r\n                {capitalize(lang)}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        <div style={{ margin: 'auto' }} />\r\n        <Button\r\n          variant=\"type\"\r\n          size=\"md\"\r\n          onClick={getStock}\r\n          style={{backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}>\r\n          Refresh\r\n        </Button>\r\n      </Container>\r\n\r\n      {!error && <StockInput getStock={getStock} />}\r\n\r\n      {stock.length === 0 && !error && <Loading />}\r\n      {stock &&\r\n        stock.map((item) => (\r\n          <StockCard\r\n            stockItem={item}\r\n            getStock={getStock}\r\n            lang={language === 'english' ? 'name' : language}\r\n            key={item._id}\r\n          />\r\n        ))}\r\n      {error && <ErrorAlert heading=\"Error\" body=\"An error occurred while trying to get the stock.\" dismissible={false} />}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Stock;\r\n","import React, { useState } from 'react';\r\nimport { Modal, Button, ButtonGroup } from 'react-bootstrap';\r\n\r\n/**\r\n * Allows user to select how much of a stock item to request\r\n */\r\nfunction OrderModal({\r\n  show,\r\n  handleClose,\r\n  getStock,\r\n  stockId,\r\n  stockName,\r\n  stockCount,\r\n  onRequest,\r\n}) {\r\n  // Currently requested amount\r\n  const [selectedAmount, setSelectedAmount] = useState(1);\r\n\r\n  function handleDecrease() {\r\n    if (selectedAmount > 1) setSelectedAmount(selectedAmount - 1);\r\n  }\r\n\r\n  function handleIncrease() {\r\n    if (selectedAmount < stockCount) setSelectedAmount(selectedAmount + 1);\r\n  }\r\n\r\n  function submitRequest() {\r\n    const requestedItem = {\r\n      id: stockId,\r\n      name: stockName,\r\n      requestedCount: selectedAmount,\r\n      countAfterRequest: stockCount - selectedAmount,\r\n    };\r\n    console.log(\"submitRequest -> stockCount\", stockCount)\r\n    console.log(\"submitRequest -> selectedAmount\", selectedAmount)\r\n    \r\n    console.log(\"countAfterRequest ->\", requestedItem.countAfterRequest);\r\n\r\n    onRequest(requestedItem);\r\n    handleClose();\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Select requested amount for: {stockName}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>\r\n          Current amount: <b>{stockCount}</b>\r\n        </p>\r\n        <p>\r\n          Amount after order: <b>{stockCount - selectedAmount}</b>\r\n        </p>\r\n        <ButtonGroup\r\n          aria-label=\"Stock item request buttons\"\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n        >\r\n          <Button size=\"lg\" \r\n          style={{backgroundColor: '#16AB8D', borderColor: '#FFFFFF', color: '#FFFFFF'}}\r\n          onClick={handleDecrease}>\r\n            -\r\n          </Button>\r\n          <Button size=\"lg\" variant=\"secondary\" style={{borderColor: '#FFFFFF'}} disabled>\r\n            {selectedAmount}\r\n          </Button>\r\n          <Button size=\"lg\"\r\n          style={{backgroundColor: '#2EFFD5', borderColor: '#FFFFFF', color: '#FFFFFF'}}\r\n          onClick={handleIncrease}>\r\n            +\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" style={{borderRadius: '200px'}} onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button onClick={submitRequest}\r\n        style={{backgroundColor: '#35E82A', borderColor: '#35E82A', borderRadius: '200px', color: '#FFFFFF'}}>\r\n          Request amount\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default OrderModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, Badge, Container, Card } from 'react-bootstrap';\r\nimport OrderModal from './OrderModal';\r\n\r\n/**\r\n * Stock item card on order screen\r\n */\r\nfunction OrderCard({\r\n  stockItem,\r\n  getStock,\r\n  lang = 'name',\r\n  onRequest,\r\n  isRequested = false,\r\n}) {\r\n  const [showOrderModal, setShowAmountModal] = useState(false);\r\n  const [hasLanguage, setHasLanguage] = useState(false);\r\n\r\n  // Handlers for showing/closing modal when ordering item\r\n  const handleClose = () => setShowAmountModal(false);\r\n  const handleShow = () => setShowAmountModal(true);\r\n\r\n  // Determine whether this stock item has a name in the specified language\r\n  useEffect(() => {\r\n    setHasLanguage(stockItem[lang] !== undefined);\r\n  }, [lang, stockItem]);\r\n\r\n  function getRequestButtonText() {\r\n    if (stockItem.count <= 0) {\r\n      return 'Out of stock';\r\n    } else if (isRequested) {\r\n      return 'Edit requested amount';\r\n    } else {\r\n      return 'Request item';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card style={{ margin: 5 }}>\r\n        <Card.Body>\r\n          <Card.Header as=\"h2\">\r\n            {hasLanguage ? stockItem[lang] : stockItem.name}\r\n            {lang !== 'name' && hasLanguage\r\n              ? ' (' + stockItem['name'] + ')'\r\n              : ''}\r\n          </Card.Header>\r\n\r\n          <Card.Text>\r\n            Amount:{' '}\r\n            <font style={{ fontSize: '1.4em', fontWeight: 'bolder' }}>\r\n              {stockItem.count}\r\n            </font>\r\n          </Card.Text>\r\n          <Container\r\n            style={{ display: 'flex', alignItems: 'center', padding: 0 }}\r\n          >\r\n            {!hasLanguage && (\r\n              <Badge variant=\"danger\">Language unavailable: {lang}</Badge>\r\n            )}\r\n            <div style={{ margin: 'left' }} />\r\n            <Button\r\n              size=\"lg\"\r\n              style={{alignSelf: 'left', backgroundColor: '#16AB8D', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}\r\n              onClick={handleShow}\r\n              disabled={stockItem.count <= 0}\r\n            >\r\n              {getRequestButtonText()}\r\n            </Button>\r\n          </Container>\r\n          <Card.Text style={{ textAlign: 'right' }}>\r\n            Last updated:{' '}\r\n            {stockItem.timestamp !== undefined\r\n              ? new Date(stockItem.timestamp).toDateString()\r\n              : 'Unavailable'}\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <OrderModal\r\n        show={showOrderModal}\r\n        handleClose={handleClose}\r\n        getStock={getStock}\r\n        stockName={stockItem.name}\r\n        stockId={stockItem._id}\r\n        stockCount={stockItem.count}\r\n        onRequest={onRequest}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderCard;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\n/**\r\n * Modal to give user confirmation upon completing action\r\n */\r\nfunction ConfirmationModal({ title, body, buttonText, show, handleClose }) {  \r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {title}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        {body}\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button onClick={handleClose}\r\n        style={{backgroundColor: '#16AB8D', borderColor: '#16AB8D', borderRadius: '200px', color: '#FFFFFF'}}>\r\n          {buttonText}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport OrderCard from '../components/OrderCard';\r\nimport Loading from '../components/Loading';\r\nimport { fetchStock } from '../api/Stock';\r\nimport LANGUAGES from '../constants/Languages';\r\nimport { Container, Dropdown, Button } from 'react-bootstrap';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addPersonInfo } from '../api/People';\r\nimport { updateStockCount } from '../api/Stock';\r\nimport ConfirmationModal from '../components/ConfirmationModal';\r\nimport ErrorAlert from '../components/ErrorAlert';\r\n\r\n/**\r\n * Allows user to order stock items only after they've filled out form\r\n */\r\nfunction OrderStock() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const fromForm = location.state !== undefined;\r\n\r\n  const [stock, setStock] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [language, setLanguage] = useState(LANGUAGES[0]);\r\n  const [personInfo, setPersonInfo] = useState(\r\n    fromForm\r\n      ? location.state.personInfo\r\n      : retrieveFromStorage('personInfo', undefined)\r\n  );\r\n  const [requestedStockItems, setRequestedStockItems] = useState(\r\n    retrieveFromStorage('requestedStockItems', [])\r\n  );\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Send user back to form if they didn't fill it out\r\n    if (!personInfo) {\r\n      history.push('/order');\r\n    } else {\r\n      localStorage.setItem('personInfo', JSON.stringify(personInfo));\r\n      getStock();\r\n      console.log(personInfo);\r\n    }\r\n  }, [fromForm, history, personInfo]);\r\n\r\n  function retrieveFromStorage(key, defaultValue) {\r\n    const stored = localStorage.getItem(key);\r\n    if (stored) {\r\n      return JSON.parse(stored);\r\n    } else {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  function getStock(timeout = 0) {\r\n    // Set stock empty to begin loading spinner\r\n    setStock([]);\r\n    setError(false);\r\n\r\n    // Fetch stock after designated time\r\n    setTimeout(() => {\r\n      fetchStock()\r\n        .then((res) => {\r\n          setStock(res.data);\r\n        })\r\n        .catch((e) => setError(true));\r\n    }, timeout);\r\n  }\r\n\r\n  function capitalize(s) {\r\n    return s.charAt(0).toUpperCase() + s.slice(1);\r\n  }\r\n\r\n  /**\r\n   * Callback for OrderModal to add item to items list\r\n   * @param {Object} requestedItem { id, name, requestedCount, countAfterRequest }\r\n   */\r\n  function onRequest(requestedItem) {\r\n    // Check if item is already in list\r\n    let alreadyRequested = requestedStockItems.find(\r\n      (item) => item.id === requestedItem.id\r\n    );\r\n\r\n    let updatedRequestedItems;\r\n\r\n    if (alreadyRequested === undefined) {\r\n      // If item isn't in list, simply add it\r\n      updatedRequestedItems = requestedStockItems.concat(requestedItem);\r\n    } else {\r\n      // If item is already in list, update its values instead of adding\r\n      let itemIndex = requestedStockItems.indexOf(alreadyRequested);\r\n\r\n      updatedRequestedItems = [...requestedStockItems];\r\n\r\n      // Replace old values with new values\r\n      updatedRequestedItems[itemIndex].requestedCount =\r\n        requestedItem.requestedCount;\r\n      updatedRequestedItems[itemIndex].countAfterRequest =\r\n        requestedItem.countAfterRequest;\r\n    }\r\n\r\n    // Update state and local storage\r\n    setRequestedStockItems(updatedRequestedItems);\r\n    localStorage.setItem(\r\n      'requestedStockItems',\r\n      JSON.stringify(updatedRequestedItems)\r\n    );\r\n  }\r\n\r\n  function writeRequestToNotes() {\r\n    let orderNotes = '';\r\n    requestedStockItems.forEach((item) => {\r\n      orderNotes += item.name + ': ' + item.requestedCount + ', ';\r\n    });\r\n    return orderNotes.slice(0, -2);\r\n  }\r\n\r\n  function submitRequest() {\r\n    // Send full person info to API\r\n    const requestBody = {\r\n      firstname: personInfo.firstName,\r\n      lastname: personInfo.lastName,\r\n      adults: personInfo.adults,\r\n      children: personInfo.adults,\r\n      zipcode: personInfo.zipcode,\r\n      'order-notes': writeRequestToNotes(),\r\n      fulfilled: false,\r\n    };\r\n    addPersonInfo(requestBody);\r\n\r\n    // Send updates for each requested item to API\r\n    const stockUpdatePromises = requestedStockItems.map((item) => {\r\n      console.log('making promise... ', item.countAfterRequest);\r\n      return updateStockCount(item.id, { newCount: item.countAfterRequest });\r\n    });\r\n\r\n    Promise.all(stockUpdatePromises).then((responses) =>\r\n      console.log(responses)\r\n    );\r\n\r\n    // Clear local storage\r\n    localStorage.removeItem('requestedStockItems');\r\n    localStorage.removeItem('personInfo');\r\n\r\n    // Show confirmation popup\r\n    setShowConfirmation(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1 style={{ textAlign: 'center' }}>Select stock here</h1>\r\n\r\n      {requestedStockItems.map((r) => (\r\n        <p key={r.name}>\r\n          {r.name}: {r.requestedCount}\r\n        </p>\r\n      ))}\r\n\r\n      {!error && (\r\n        <Button\r\n          variant=\"type\"\r\n          className=\"mb-3\"\r\n          onClick={submitRequest}\r\n          block\r\n          style={{\r\n            backgroundColor: '#16AB8D',\r\n            borderColor: '#FFFFF5',\r\n            color: '#FFFFFF',\r\n            borderRadius: '200px',\r\n          }}\r\n          disabled={requestedStockItems.length === 0}\r\n        >\r\n          {requestedStockItems.length > 0\r\n            ? 'Submit request'\r\n            : 'Select items below'}\r\n        </Button>\r\n      )}\r\n\r\n      <Container style={{ display: 'flex', alignItems: 'center', padding: 0 }}>\r\n        <Dropdown variant=\"type\" onChange={(e) => console.log(e)}>\r\n          <Dropdown.Toggle\r\n            variant=\"type\"\r\n            id=\"dropdown-basic\"\r\n            size=\"md\"\r\n            className=\"mb-3\"\r\n            style={{\r\n              backgroundColor: '#16AB8D',\r\n              borderColor: '#FFFFF5',\r\n              color: '#FFFFFF',\r\n              borderRadius: '200px',\r\n            }}\r\n          >\r\n            Language: <b>{capitalize(language)}</b>\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu>\r\n            {LANGUAGES.map((lang) => (\r\n              <Dropdown.Item\r\n                onSelect={(key) => setLanguage(key)}\r\n                eventKey={lang}\r\n                key={lang}\r\n              >\r\n                {capitalize(lang)}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        <div style={{ margin: 'auto' }} />\r\n        <Button\r\n          variant=\"type\"\r\n          size=\"md\"\r\n          onClick={getStock}\r\n          style={{\r\n            backgroundColor: '#16AB8D',\r\n            borderColor: '#FFFFF5',\r\n            color: '#FFFFFF',\r\n            borderRadius: '200px',\r\n          }}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </Container>\r\n\r\n      {/* List of stock */}\r\n      {stock.length === 0 && !error && <Loading />}\r\n      {stock &&\r\n        personInfo &&\r\n        stock.map((item) => (\r\n          <OrderCard\r\n            stockItem={item}\r\n            getStock={getStock}\r\n            lang={language === 'english' ? 'name' : language}\r\n            key={item._id}\r\n            onRequest={onRequest}\r\n            isRequested={requestedStockItems.some(\r\n              (requested) => item._id === requested.id\r\n            )}\r\n          />\r\n        ))}\r\n      {error && (\r\n        <ErrorAlert\r\n          heading=\"Error\"\r\n          body=\"An error occurred while trying to get the stock.\"\r\n          dismissible={false}\r\n        />\r\n      )}\r\n\r\n      {/* Confirmation popup */}\r\n      <ConfirmationModal\r\n        style={{\r\n          backgroundColor: '#16AB8D',\r\n          borderColor: '#16AB8D',\r\n          color: '#FFFFFF',\r\n        }}\r\n        title=\"Order successfully placed!\"\r\n        body=\"Thanks for your patronage! Your order will be fulfilled shortly.\"\r\n        buttonText=\"Back to Home\"\r\n        show={showConfirmation}\r\n        handleClose={() => {\r\n          setShowConfirmation(false);\r\n          history.push('/'); // Redirect back home\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default OrderStock;\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\n/**\r\n * Confirmation modal when fulfilling a person's order\r\n */\r\nfunction FulfillModal({ person, show, handleClose, fulfillPerson }) {\r\n  /**\r\n   * Handles confirmation of fulfilling a person's order\r\n   */\r\n  function handleConfirm() {\r\n    fulfillPerson(person._id);\r\n    handleClose();\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header>Confirm fulfillment</Modal.Header>\r\n      <Modal.Body>\r\n        <h5>\r\n          Are you sure that {person.firstname}'s order is correct and has been\r\n          fulfilled?\r\n        </h5>\r\n        <p>{person['order-notes']}</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" style={{borderRadius: '200px'}} onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button onClick={handleConfirm}\r\n        style={{backgroundColor: '#35E82A', borderColor: '#FFFFF5', color: '#FFFFFF', borderRadius: '200px'}}>\r\n          Confirm fulfillment\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default FulfillModal;\r\n","import React, { useState } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport FulfillModal from './FulfillModal';\r\n\r\n/**\r\n * Displays:\r\n * - person's name\r\n * - order notes\r\n * - button that sends a socket emit to backend that\r\n *   sets fulfill to true\r\n */\r\nfunction UnfulfilledOrderCard({ person, fulfillPerson }) {\r\n  const [showFulfillModal, setShowFulfillModal] = useState(false);\r\n\r\n  // Handlers for showing/closing modal when ordering item\r\n  const handleClose = () => setShowFulfillModal(false);\r\n  const handleShow = () => setShowFulfillModal(true);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        key={person._id}\r\n        size=\"lg\"\r\n        style={{ margin: 5 }}\r\n      >\r\n        <Card.Body>\r\n          <Card.Header as=\"h2\">\r\n            {person.firstname} {person.lastname}\r\n          </Card.Header>\r\n          <Card.Text>{person['order-notes']}</Card.Text>\r\n          <Button onClick={handleShow} block\r\n          style={{backgroundColor: '#16AB8D', borderColor: '#16AB8D', borderRadius: '200px', color: '#FFFFFF'}}>\r\n            Fulfill Order\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <FulfillModal\r\n        person={person}\r\n        show={showFulfillModal}\r\n        handleClose={handleClose}\r\n        fulfillPerson={fulfillPerson}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UnfulfilledOrderCard;\r\n","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport cart from '../images/empty-cart.svg'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        justifyContent: 'center',\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    dialog: {\r\n        margin: theme.spacing(10),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: 'auto',\r\n        width: 'fit-content',\r\n    },\r\n    image: {\r\n        width: theme.spacing(25),\r\n        height: theme.spacing(25),\r\n        marginTop: theme.spacing(20)\r\n    },\r\n    grid: {\r\n        textAlign: 'center',\r\n    }\r\n}));\r\n\r\nconst Theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#00c853\",\r\n        },\r\n        secondary: {\r\n            main: \"#00c853\",\r\n        },\r\n        action: {\r\n            main: \"#00c853\"\r\n        }\r\n    },\r\n});\r\n\r\n\r\n\r\nexport default function AlertDialogSlide() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MuiThemeProvider theme={Theme}>\r\n                <Dialog\r\n                    open={open}\r\n                    maxWidth='lg'\r\n                    keepMounted\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                    className={classes.dialog}\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"No orders at the moment\"}</DialogTitle>\r\n                    <DialogActions className={classes.button}>\r\n                        <Button onClick={handleClose} color=\"primary\" variant='contained'>\r\n                            OK\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </MuiThemeProvider>\r\n            <Grid container className={classes.grid}>\r\n                <Grid item lg={4} sm={4}></Grid>\r\n                <Grid item xs={12} lg={4} sm={4} className={classes.grid}>\r\n                    <img src={cart} className={classes.image}></img>\r\n                </Grid>\r\n                <Grid item lg={4} sm={4}></Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Container from 'react-bootstrap/Container';\r\nimport UnfulfilledOrderCard from '../components/UnfulfilledOrderCard';\r\nimport { BASE_API_URL } from '../api/Client';\r\nimport Dialog from '../components/Dialog'\r\n\r\n/**\r\n * Page with list of people with unfulfilled orders\r\n */\r\nfunction OrderTracker() {\r\n  const [ordersList, setOrdersList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const socket = socketIOClient(BASE_API_URL);\r\n    socket.on('person', (data) => {\r\n      eventHandler(data);\r\n    });\r\n\r\n    const eventHandler = (personData) => {\r\n      setOrdersList((currentOrders) => [...currentOrders, personData]);\r\n    };\r\n\r\n    return () => {\r\n      console.log('effect done');\r\n      socket.disconnect();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  function personFulfilled(id) {\r\n    const socket = socketIOClient(BASE_API_URL);\r\n    console.log('printing socket object: ');\r\n    console.log(socket);\r\n\r\n    console.log('emitting personfulfilled');\r\n    socket.emit('personFulfilled', id);\r\n    socket.on('personFulfillSuccess', function (confirmation) {\r\n      console.log('confirmed ' + confirmation);\r\n      socket.disconnect();\r\n    });\r\n    // Remove fulfilled order from list after emitting fulfillment through socket\r\n    setOrdersList(ordersList.filter((order) => order._id !== id));\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {ordersList.length === 0 && <Dialog/>}\r\n      {ordersList &&\r\n        ordersList.map((order) => (\r\n          <UnfulfilledOrderCard\r\n            fulfillPerson={personFulfilled}\r\n            person={order}\r\n            key={order._id}\r\n          />\r\n        ))}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default OrderTracker;\r\n","import React, { useState } from 'react';\r\nimport { Card, FormControl, InputGroup } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Login() {\r\n  const [pantryName, setPantryName] = useState('');\r\n\r\n  function handlePantryNameChange(e) {\r\n    setPantryName(e.target.value);\r\n  }\r\n\r\n  function handleLogin() {\r\n    console.log(`log in to pantry: ${pantryName}`);\r\n  }\r\n\r\n  function handleSignup() {\r\n    console.log('signup');\r\n  }\r\n\r\n  return (\r\n    <Container style={{ textAlign: 'center' }}>\r\n      <h1>Log In</h1>\r\n      <Card className=\"mb-3\">\r\n        <Card.Body>\r\n          <p>Gain full access to your pantry's stock and current orders.</p>\r\n          <InputGroup\r\n            className=\"mb-3\"\r\n            size=\"lg\"\r\n            onChange={handlePantryNameChange}\r\n          >\r\n            <FormControl\r\n              aria-label=\"Default\"\r\n              placeholder=\"Enter your pantry name here\"\r\n              aria-describedby=\"inputGroup-sizing-default\"\r\n            />\r\n          </InputGroup>\r\n          <Button style={{ backgroundColor: 'green' }} onClick={handleLogin}>\r\n            Login to your pantry\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card>\r\n        <Card.Body>\r\n          <p>Don't have a pantry with us yet?</p>\r\n          <Button style={{ backgroundColor: 'green' }} onClick={handleSignup}>\r\n            Sign up to create a pantry\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Order from './pages/Order';\r\nimport Stock from './pages/Stock';\r\nimport OrderStock from './pages/OrderStock';\r\nimport OrderTracker from './pages/OrderTracker';\r\nimport Login from './pages/Login';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Navbar รง />\r\n      {/* FIXME: naive fix for keeping a fixed navbar */}\r\n      <div style={{ padding: 55 }} />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route exact path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route path=\"/stock\">\r\n          <Stock />\r\n        </Route>\r\n        <Route path=\"/order\">\r\n          <Order />\r\n        </Route>\r\n        <Route path=\"/order-stock\">\r\n          <OrderStock />\r\n        </Route>\r\n        <Route path=\"/order-tracker\"> \r\n          <OrderTracker />\r\n        </Route>\r\n        <Route path=\"/login\">\r\n          <Login />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <h1>\r\n            Welcome to <font style={{ color: '#26B020' }}>Pan-Lang</font>!\r\n          </h1>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}